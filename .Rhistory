select(flights, -minute)
names(flights)
# arrange all rows in a descent way
arrange(flights, desc(year))
unique(flights$year)
names(flights)
# arrange all rows in a descent way
arrange(flights, desc(day))
arrange(flights, day)
# arrange all rows in a descent way
arrange(flights, desc(dep_delay))
arrange(flights, dep_delay)
View(flights)
?flights
flights %>%
group_by(month) %>%
summarise(
mean = mean(arr_delay)
)
class(flights$arr_delay)
flights %>%
group_by(month) %>%
summarise(
mean <- mean(arr_delay)
)
a <- flights %>%
group_by(month)
head(a)
mean(flights$arr_delay)
is.na(flights$arr_delay)
any.na(flights$arr_delay)
any(is.na(flights$arr_delay))
flights %>%
group_by(month) %>%
summarise(
mean = mean(arr_delay, na.rm = TRUE)
)
mtcars
flights %>%
group_by(month) %>%
summarise(
mean = mean(arr_delay, na.rm = TRUE)
)
flights %>%
filter(arr_delay < 0)
flights %>%
select(arr_delay) %>%
filter(arr_delay < 0)
flights %>%
select(arr_delay) %>%
filter(arr_delay < 0) %>%
summarise(
n = count()
)
flights %>%
select(arr_delay) %>%
filter(arr_delay < 0) %>%
summarise(
total = n()
)
summarise(
total = n()
)
flights %>%
filter(arr_delay < 0) %>%
group_by(carrier) %>%
summarise(
total = n()
)
names(flights)
flights %>%
mutate(
speed = distance / air_time
)
flights_speed <- flights %>%
mutate(
speed = distance / air_time
)
flights_speed <- flights %>%
transmute(
speed = distance / air_time
)
head(flights_speed)
# for Loops
for (i in seq(1, 5)) {
cat("iteracion nr.", i, "\n")
}
while (i <= 5) {
cat("iteracion nr.", i, "\n")
i <- i + 1
}
# repeat
i <- 0
repeat {
i <- i + 1
cat("iteracion nr.", i, "\n")
if (i >= 5) break
}
# funciones
mi_funcion <- function() {
print("hola")
}
mi_funcion <- function(nombre) {
cat("hola", nombre)
}
mi_funcion <- function(nombre = "Data Latam") {
cat("hola", nombre)
}
mi_funcion()
environment_function <- function(x){
y <- 5
print(x + y)
}
environment_function(5)
y
#------4.1 Loop over a dataset:
##Don't pay attention yet to this line of code##
tidy_bmi_data <- gather(data = data, key = year, bmi, - Country)
library(tidyr)
#------4.1 Loop over a dataset:
##Don't pay attention yet to this line of code##
tidy_bmi_data <- gather(data = data, key = year, bmi, - Country)
# Read your data:
data <- read.csv("raw_data/bmi.csv")
#------4.1 Loop over a dataset:
##Don't pay attention yet to this line of code##
tidy_bmi_data <- gather(data = data, key = year, bmi, - Country)
head(tidy_bmi_data)
NROW(filter(tidy_bmi_data, Country == "Angola"))
filter(tidy_bmi_data, Country == "Angola")
library(dplyr)
filter(tidy_bmi_data, Country == "Angola")
?vector
results <- vector("numeric")
results <- vector("numeric",unique(tidy_bmi_data$Country))
results <- vector("numeric",length(unique(tidy_bmi_data$Country)))
head(data)
results <- vector("numeric",ncol(data)-1)
ncol(data)
a = ncol(data)
a-1
results <- vector("numeric",ncol(data[,-1]))
for(i in seq_along(tidy_bmi_data$Country)){
results[[i]] <- mean(df[[i]])
}
for(i in seq_along(tidy_bmi_data$Country)){
results[[i]] <- mean(data[[i]])
}
class(data$Y1980)
class(data$Y1981)
mean(data[[i]])
for(i in seq_along(tidy_bmi_data)){
results[[i]] <- mean(data[[i]])
}
results <- vector("numeric",ncol(data))
for(i in seq_along(tidy_bmi_data)){
results[[i]] <- mean(data[[i]])
}
for(i in seq_along(data)){
mean_per_year[[i]] <- mean(data[[i]])
}
data
mean_per_year <- vector("numeric",ncol(data))
for(i in seq_along(data)){
mean_per_year[[i]] <- mean(data[[i]])
}
library(ggplot2)
mtcars
mpg <- mtcars
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
head(mtcars)
ggplot(data = mpg) +
geom_point(mapping = aes(x = disp, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = disp, y = gear, color = class))
head(mtcars)
ggplot(data = mpg) +
geom_point(mapping = aes(x = disp, y = gear, color = cyl))
# We need to make cyl a factor
mpg$cyl <- as.factor(mpg$cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = disp, y = gear, color = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = disp, y = mpg, color = cyl))
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = disp, y = hwy, color = cyl))
rm(mpg)
ggplot(data = mpg) +
geom_point(mapping = aes(x = disp, y = hwy, color = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl))
# We need to make cyl a factor
mpg$cyl <- as.factor(mpg$cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl))
# We can use size instead of color:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl))
# Or shapes
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = cyl))
# Sometimes is useful to use some transparency to visualize the data points:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl, alpha = 0.5))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = cyl)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
?mpg
#------2.3 Geometric objects:
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
#------2.3 Geometric objects:
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv)) +
geom_point()
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth(mapping = aes(linetype = drv, color = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(
data = diamonds,
mapping = aes(x = cut, fill = clarity)
) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(
data = diamonds,
mapping = aes(x = cut, fill = clarity)
) +
geom_bar(fill = NA, position = "identity")
ggplot(
data = diamonds,
mapping = aes(x = cut, color = clarity)
) +
geom_bar(fill = NA, position = "identity")
1/5
ggplot(
data = diamonds,
mapping = aes(x = cut, fill = clarity)
) +
geom_bar(alpha = 0.2, position = "identity")
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = "fill"
)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = "fill"
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = "dodge"
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = "dodge"
) +
theme_classic(base_size = 18)
a <- (1:10)
?mpg
library(ggplot2)
?mpg
# -----------------3.Incio de sesi?n-------------------------------------------------
# Directorio de trabajo:
setwd("C:/Users/education/Documents/example") #Para elegir el directorio de trabajo
# To create vectors c( )
a <- c("biology", "A", "estadistica")
example <- c(1,2,"a")
class(example)
# Read your data:
data <- read.csv("raw_data/bmi.csv")
# Check your data:
head(data)
tail(data)
str(data)
View(data)
# Where is your working directory?
getwd()
# What do I have in my working directory?
dir()
View(data)
#------4.1 Loop over a dataset:
#Let's say that you want to get the mean of the columns:
mean(data$Y1980)
mean(data$Y1981)
mean_per_year <- vector("numeric",ncol(data))
for(i in seq_along(data)){
mean_per_year[[i]] <- mean(data[[i]])
}
mean_per_year
ncol(data)
# for Loops
for (i in seq(1, 5)) {
cat("iteracion nr.", i, "\n")
}
# for Loops
for (i in seq(1, 5)) {
cat("example", i, "\n")
}
# for Loops
for (i in seq(1, 5)) {
cat("example", i, )
}
# Functions
mi_funcion <- function() {
print("hola")
}
mi_funcion()
mi_funcion <- function(name) {
cat("hola", name)
}
mi
mi_funcion()
mi_funcion(tropbio)
mi_funcion("tropbio")
sumar <- function(w){
y <- w + 5
print(y)
}
suma(5)
sumar(5)
environment_function <- function(x){
y <- 5
print(x + y)
}
environment_function <- function(x){
y <- 5
print(x + y)
}
environment_function(5)
y
for(i in ncol(data)){
mean_per_year[[i]] <- mean(data[[i]])
}
rm(mean_per_year)
for(i in ncol(data)){
mean_per_year[[i]] <- mean(data[[i]])
}
-
tidy_bmi_data <- gather(data = data, key = year, bmi, - Country)
library(tidyr)
tidy_bmi_data <- gather(data = data, key = year, bmi, - Country)
View(tidy_bmi_data)
tidy_bmi_data <- gather(data, year, bmi, - Country)
tidy_bmi_data <- gather(data = data, key = year, bmi, - Country)
tidy_bmi_data_2 <- gather(data, year, bmi, - Country)
no_tidy_bmi_data <- spread(data = tidy_bmi_data, key = year, value = bmi)
View(no_tidy_bmi_data)
# With a real dataset:
fotos <- read.csv("raw_data/Camara_3.csv")
# With a real dataset:
fotos <- read.csv("raw_data/Camara_3.csv")
View(fotos)
fotos_sep <- separate(fotos, col = DateAndTime, into = c("Date", "Time"),
sep = " ")
flights <- nycflights13::flights
?flights
head(flights)
# What if you want just the flights from january?
filter(flights, month == 1)
a <- c(2)
a = c(1:2)
# What if you want just the flights from january?
filter(flights, month == 1)
?flights
names(flights)
# What if you want just the flights from january?
filter(flights, month == 1)
class(flights$month)
# What if you want just the flights from january?
filter(flights, "month" == 1)
# What if you want just the flights from january?
filter(flights$month == 1)
# What if you want just the flights from january?
filter(flights, month == 1)
# What if you want the flights just from january and february?
filter(flights, month == 1 | month == 2)
library(dplyr)
# What if you want just the flights from january?
filter(flights, month == 1)
library(tidyr)
library(dplyr)
library(ggplot2)
# What if you want the flights just from january and february?
filter(flights, month == 1 | month == 2)
filter(flights, month != 1)
# Select just one column from the data:
select(flights, month)
# arrange all rows in a descending way
arrange(flights, desc(dep_delay))
arrange(flights, dep_delay)
# arrange all rows in a descending way
arrange(flights, desc(month))
arrange(flights, (month))
flights %>%
group_by(month) %>%
summarise(
mean = mean(arr_delay)
)
any(is.na(flights$arr_delay))
flights %>%
group_by(month) %>%
summarise(
mean = mean(arr_delay, na.rm = TRUE)
)
flights %>%
filter(arr_delay < 0) %>%
group_by(carrier) %>%
summarise(
total = n()
)
flights %>%
mutate(
speed = distance / air_time
)
flights_speed <- flights %>%
mutate(
speed = distance / air_time
)
flights_speed <- flights %>%
transmute(
speed = distance / air_time
)
head(flights_speed)
library(ggplot2)
?ggplot
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl))
?mpg
mpg$cyl <- as.factor(mpg$cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = cyl))
# We can use size instead of color:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl))
# Sometimes is useful to use some transparency to visualize the data points:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl, alpha = 0.5))
# Sometimes is useful to use some transparency to visualize the data points:
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, size = cyl, alpha = 0.1))
# Or shapes
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, shape = cyl))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 3)
#------2.3 Geometric objects:
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
?geom_line
?geom_abline_smooth
?geom_smooth
#------2.3 Geometric objects:
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy,se = FALSE, linetype = drv))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = drv)) +
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = "dodge"
)
# fill position
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = "fill"
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = clarity),
position = "dodge"
) +
theme_classic(base_size = 18)
